<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.eggwall.android.photoviewer">

    <!-- To show a photo frame all day -->
    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <!-- To download images -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <!-- To store the files on external storage -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

    <!--
     Attribute usesClearTextTraffic specifies that we are ok with plain http://
     requests, rather than forcing https:// requests. The justification is that
     the user has the option of encrypting the full zip file, and they can use https://
     in addition to http. Many enthusiasts will host content on their own home systems
     and their own home networks (192.168...) those will be fine going over http.

     That directive only exists for sdk 23 or higher. For lower sdks, the default is
     to allow http:// in addition to https://. Also, keeping a directive like this
     is safe for older versions of the platform which ignores directives that it doesn't know
     about.
    -->
    <application
        android:allowBackup="true"
        android:fullBackupContent="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher"
        android:supportsRtl="true"
        android:theme="@style/AppTheme.AppBarOverlay"
        android:usesCleartextTraffic="true"
        android:networkSecurityConfig="@xml/network_security_config">

        <!--
         Importing a gallery. This doesn't need a full activity because you could use
         the custom photoviewer:// URL scheme. But this is helpful for two reasons:
         1. It works if the custom photoviewer:// URL scheme might not, like chromebooks
         2. It allows us to show a helpful UI explaining what the program does.
        -->
        <activity
            android:name=".ImportActivity"
            android:label="@string/title_activity_import"
            android:theme="@style/AppTheme.NoActionBar"
            android:parentActivityName=".MainActivity">
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value="com.eggwall.android.photoviewer.MainActivity" />
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!--
         The Settings Activity that allows modification of critical parameters.
        -->
        <activity
            android:name=".SettingActivity"
            android:label="@string/title_setting_import"
            android:theme="@style/AppTheme.NoActionBar"
            android:parentActivityName=".MainActivity">
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value="com.eggwall.android.photoviewer.MainActivity" />
        </activity>

        <!--
         The default screen, the PhotoViewer, and also the drawer, etc.
         launchMode="singleTask" and taskAffinity="" are required to make a single task be
         around, and for the Activity to get onNewIntent() rather than a new onCreate() method.
        -->
        <activity
            android:name=".MainActivity"
            android:configChanges="orientation|screenSize"
            android:launchMode="singleTask"
            android:taskAffinity=""
            android:clearTaskOnLaunch="true"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="eggwall"
                    android:scheme="photoviewer" />
            </intent-filter>
        </activity>

        <!--
         Shows a list of albums. Not currently hooked in, since the drawer shows
         recent albums. I intend to revive this as an Album management activity at
         some point in the future, so keeping it around. Hopefully proguard strips it
         all away.
        -->
        <activity
            android:name=".AlbumListActivity"
            android:label="@string/title_activity_album_list"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />
            </intent-filter>
        </activity>
    </application>

</manifest>